version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy frontend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy backend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build-front
          command: |
            cd frontend  
            npm install
            npm run build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build-back
          command: |
            cd backend
            npm install
            npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-front
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-back
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan-front
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan-back
          command: |
            cd backend
            npm install
            npm audit fix --legacy-peer-deps
            npx npm-force-resolutions
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      # - run:
      #     name: Create Cloudformation frontend Stack
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/backend.yml \
      #         --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --tags project=udapeople
      # - run:
      #     name: Create Cloudformation backend Stack
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --tags project=udapeople
      - run: touch ip.txt
      - run:
          name: get Public IP
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ip.txt
      - run: cat tmp/ip.txt >> .circleci/ansible/inventory
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths: ip.txt
      - run: chmod 777 tmp
      - run: cat tmp/ip.txt
      - destroy_environment

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: tmp
      - run: ls
      - run: cat tmp/ip.txt >> .circleci/ansible/inventory
      - run: cat .circleci/ansible/inventory.txt
      # - add_ssh_keys:
      #     fingerprints:
      #       - "98:cf:3c:aa:da:01:51:57:69:c7:e6:9b:48:58:db:42"
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update ansible
      # - run:
      #     name: Configure server
      #     command: |
      #       cd .circleci/ansible /
      #       ansible-playbook -i inventory.txt configure-server.yml
      # - destroy_environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/Dz7NYQUNQrrnhA34RMrMVw/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy_environment
  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      # - run: yum install -y tar gzip
      - run:
          name: get env frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text) 
            export API_URL="http://${BACKEND_IP}:3030" 
            echo "API_URL = ${API_URL}" 
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env 
            cat frontend/.env
      - run:
          name: deploy frontend
          command: |
            cd frontend 
            npm install 
            npm run build 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist 
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: tmp
      - run: cat tmp/ip.txt >> .circleci/ansible/inventory
      - run: cat .circleci/ansible/inventory.txt
      - add_ssh_keys:
          fingerprints:
            - "98:cf:3c:aa:da:01:51:57:69:c7:e6:9b:48:58:db:42"
      - run:
          name: Install dependencies
          command: |
            sudo apt install ansible
      - run:
          name: prepare
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment
  backend-smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            BACKEND_IP=$(cat tmp/ip.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
  frontend-smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            BACKEND_IP=$(cat tmp/ip.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [test-frontend]
      # - scan-backend:
      #     requires: [test-backend]
      - deploy-infrastructure
      # requires: [scan-backend, scan-frontend]
      - configure_infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure_infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - backend-smoke-test:
      #     requires: [deploy-backend]
      # - frontend-smoke-test:
      #     requires: [deploy-frontend]
