version: 2.1
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy frontend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy backend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build-front
          command: |
            cd frontend  
            npm install
            npm run build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build-back
          command: |
            cd backend
            npm install
            npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-front
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-back
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan-front
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan-back
          command: |
            cd backend
            npm install
            npm audit fix --legacy-peer-deps
            npx npm-force-resolutions
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run: yum install -y tar gzip
      # - run:
      #     name: Create Cloudformation frontend Stack
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/backend.yml \
      #         --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --tags project=udapeople
      # - run:
      #     name: Create Cloudformation backend Stack
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --tags project=udapeople
      - run:
          name: get Public IP
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory.txt
      - destroy_environment
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["98:cf:3c:aa:da:01:51:57:69:c7:e6:9b:48:58:db:42"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run: cd .circleci/ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [test-frontend]
      # - scan-backend:
      #     requires: [test-backend]
      - deploy-infrastructure
        # requires: [scan-backend, scan-frontend]
      - configure_infrastructure:
          requires: [deploy-infrastructure]
